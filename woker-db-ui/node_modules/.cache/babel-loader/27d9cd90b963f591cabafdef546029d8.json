{"ast":null,"code":"import axios from \"axios\";\nimport { Buffer } from \"buffer\";\nconst userName = \"restUser\";\nconst userPassword = \"restPassword\";\nconst token = userName + \":\" + userPassword;\nconst encodedToken = Buffer.from(token).toString(\"base64\");\nconst usersURL = 'http://localhost:8080/workers';\nvar config = {\n  Headers: {\n    \"Authorization\": \"Basic \" + encodedToken\n  }\n};\n\nclass UserService {\n  getUsers() {\n    return axios.get(usersURL, config);\n  }\n\n  deleteUser(id) {\n    axios.delete(usersURL + \"/\" + id, config);\n  }\n\n  postUser(name, position) {\n    axios.post(usersURL + \"?name=\" + name + \"&position=\" + position, config);\n  }\n\n}\n\nexport default new UserService();","map":{"version":3,"sources":["C:/Users/student/Desktop/Full stack worker db/woker-db-ui/src/services/UserService.js"],"names":["axios","Buffer","userName","userPassword","token","encodedToken","from","toString","usersURL","config","Headers","UserService","getUsers","get","deleteUser","id","delete","postUser","name","position","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,KAAK,GAAGF,QAAQ,GAAG,GAAX,GAAiBC,YAA/B;AACA,MAAME,YAAY,GAAGJ,MAAM,CAACK,IAAP,CAAYF,KAAZ,EAAmBG,QAAnB,CAA4B,QAA5B,CAArB;AACA,MAAMC,QAAQ,GAAG,+BAAjB;AAEA,IAAIC,MAAM,GAAG;AACXC,EAAAA,OAAO,EAAE;AACP,qBAAiB,WAAWL;AADrB;AADE,CAAb;;AAMA,MAAMM,WAAN,CAAkB;AAGhBC,EAAAA,QAAQ,GAAG;AACT,WAAOZ,KAAK,CAACa,GAAN,CAAUL,QAAV,EAAoBC,MAApB,CAAP;AACD;;AAEDK,EAAAA,UAAU,CAACC,EAAD,EAAK;AACbf,IAAAA,KAAK,CAACgB,MAAN,CAAcR,QAAQ,GAAG,GAAX,GAAiBO,EAA/B,EAAoCN,MAApC;AACD;;AAEDQ,EAAAA,QAAQ,CAACC,IAAD,EAAOC,QAAP,EAAiB;AACvBnB,IAAAA,KAAK,CAACoB,IAAN,CAAYZ,QAAQ,GAAG,QAAX,GAAsBU,IAAtB,GAA6B,YAA7B,GAA4CC,QAAxD,EAAmEV,MAAnE;AACD;;AAbe;;AAgBlB,eAAe,IAAIE,WAAJ,EAAf","sourcesContent":["import axios from \"axios\";\r\nimport { Buffer } from \"buffer\";\r\n\r\nconst userName = \"restUser\";\r\nconst userPassword = \"restPassword\";\r\nconst token = userName + \":\" + userPassword;\r\nconst encodedToken = Buffer.from(token).toString(\"base64\");\r\nconst usersURL = 'http://localhost:8080/workers';\r\n\r\nvar config = {\r\n  Headers: {\r\n    \"Authorization\": \"Basic \" + encodedToken\r\n  }\r\n}\r\n\r\nclass UserService {\r\n\r\n\r\n  getUsers() {\r\n    return axios.get(usersURL, config);\r\n  }\r\n\r\n  deleteUser(id) {\r\n    axios.delete((usersURL + \"/\" + id), config);\r\n  }\r\n\r\n  postUser(name, position) {\r\n    axios.post((usersURL + \"?name=\" + name + \"&position=\" + position), config);\r\n  }\r\n}\r\n\r\nexport default new UserService();"]},"metadata":{},"sourceType":"module"}